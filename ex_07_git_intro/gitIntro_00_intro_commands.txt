Intro to git and the most common commands

	-> Create repository:
		- In root of the project.
		- Will create the directory as a hidden file.
		$ git init

	-> Check status
		- Will let you know the info about the git repository
		$ git status

	-> Add elements to the repository
		- Sends elements from the local directory to the git directory
		$ git add

	-> Commit changes
		- Commits the changes added to the git repository. Kind of like making a snapshot of the project.
		$ git commit -m "<message>"

Github introduction

	Github is not git. It is a library for git repositories. 
	Quick info:

	-> The name of the github repo doesn't have to be the same as the local one.

	-> Once the git repo is made and we made a commit, we can push it into the remote repo (that's basically github, a remote repository)

	-> We can have several remote repositories for different purposes. But we should create an origin one.
			$ git remote origin <link to github repo>
			$ git push origin master

	-> Interacting with the remote
		$ git push // Sends stuff into the remote repo
		$ git fetch // Takes stuff from the remote repo

	-> Selectin which remote to send the data:
		$ git push -u <name of remote> <name of the branch>
	
Git workflow

	It is a good practice to make a README.md (.md for markdown, it gets converted into html so it can be styled in the page).
	The README is an intro to the project with documentation and special notes and stuff.

.git directory examination

	You can check the ,git directory in your local directory by checking hidden files.
	There will be several other dirs inside it, let's go throught them:
		-> branches.
		-> hooks: a tool and a process that can be run at a specific time. Script that apply to the data in the dir, such as verifying that you wanna push in case you have several remotes and so on.
		-> info: show info on the repo
		-> logs: contains the info and the logs for the Commits
		-> objects: objects in memory
		-> refs: reference code and inside
		-> tags: in case we tag the dir
		-> COMMIT EDITMSG: allows to edit the commit messages.
		-> config: shows some technical info, notably the url of origin as well as the branch order and so on.

	Using .gitignore

		You want to hide certain information, such as passwords, API keys and so on, because once it's in github anybody can see and steal it.
		For that purpose we use a .gitignore file where we list by name the files you don't want pushed into the repo.
		Be careful to spell things correctly.
		Sometimes it doesn't work because of cache stored data. To solve this we can remove the cache data by doing this:
			$ git rm -r --cached .

	
